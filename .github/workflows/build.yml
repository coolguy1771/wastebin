name: Build

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]
    workflow_call:
        outputs:
            image-digest:
                description: 'Docker image digest'
                value: ${{ jobs.docker.outputs.digest }}

permissions:
    contents: read
    packages: write
    attestations: write
    id-token: write

env:
    GO_VERSION: '1.24'
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}

jobs:
    build-frontend:
        name: Build Frontend
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Code
              uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

            - name: Set up Node.js
              uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
              with:
                  node-version: '20'
                  cache: 'npm'
                  cache-dependency-path: web/package-lock.json

            - name: Install Dependencies
              working-directory: ./web
              run: npm ci

            - name: Build Frontend
              working-directory: ./web
              run: npm run build

            - name: Upload Build Artifacts
              uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
              with:
                  name: frontend-build
                  path: web/dist/
                  retention-days: 1

    build-backend:
        name: Build Backend
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Code
              uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

            - name: Set up Go Environment
              uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
              with:
                  go-version: ${{ env.GO_VERSION }}
                  cache: true

            - name: Build Binary
              run: |
                  CGO_ENABLED=0 GOOS=linux go build -v \
                    -ldflags="-w -s -X main.version=${{ github.sha }}" \
                    -o wastebin ./cmd/wastebin

            - name: Upload Binary
              uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
              with:
                  name: wastebin-binary
                  path: wastebin
                  retention-days: 1

    docker-build:
        name: Build Docker Image
        runs-on: ${{ matrix.runner }}
        needs: [build-frontend]
        strategy:
            fail-fast: false
            matrix:
                include:
                    - platform: linux/amd64
                      runner: ubuntu-latest
                    - platform: linux/arm64
                      runner: ubuntu-24.04-arm64
        outputs:
            image: ${{ steps.image.outputs.image }}
            digest: ${{ steps.build.outputs.digest }}
        steps:
            - name: Checkout Code
              uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

            - name: Download Frontend Build
              uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
              with:
                  name: frontend-build
                  path: web/dist/

            - name: Prepare platform variables
              run: |
                  platform=${{ matrix.platform }}
                  echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
                  echo "TIMESTAMP=$(git log -1 --pretty=%ct)" >> $GITHUB_ENV

            - name: Extract metadata
              id: meta
              uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3

            - name: Log in to Container Registry
              if: github.event_name != 'pull_request'
              uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Build and push by digest
              id: build
              uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
              with:
                  context: .
                  platforms: ${{ matrix.platform }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha,scope=build-${{ env.PLATFORM_PAIR }}
                  cache-to: type=gha,mode=max,scope=build-${{ env.PLATFORM_PAIR }}
                  outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=${{ github.event_name != 'pull_request' }}
                  provenance: mode=max
                  sbom: true
              env:
                  DOCKER_BUILDKIT: 1
                  BUILDKIT_PROGRESS: plain
                  SOURCE_DATE_EPOCH: ${{ env.TIMESTAMP }}

            - name: Export digest
              run: |
                  mkdir -p ${{ runner.temp }}/digests
                  digest="${{ steps.build.outputs.digest }}"
                  touch "${{ runner.temp }}/digests/${digest#sha256:}"

            - name: Upload digest
              uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
              with:
                  name: digests-${{ env.PLATFORM_PAIR }}
                  path: ${{ runner.temp }}/digests/*
                  if-no-files-found: error
                  retention-days: 1

    docker-merge:
        name: Create Multi-Platform Manifest
        runs-on: ubuntu-latest
        needs: [docker-build]
        if: github.event_name != 'pull_request'
        outputs:
            image: ${{ steps.meta.outputs.tags }}
            digest: ${{ steps.merge.outputs.digest }}
        steps:
            - name: Download digests
              uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
              with:
                  path: ${{ runner.temp }}/digests
                  pattern: digests-*
                  merge-multiple: true

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3

            - name: Extract metadata
              id: meta
              uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  tags: |
                      type=ref,event=branch
                      type=ref,event=pr
                      type=sha,prefix={{branch}}-
                      type=raw,value=latest,enable={{is_default_branch}}

            - name: Log in to Container Registry
              uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Create manifest list and push
              id: merge
              working-directory: ${{ runner.temp }}/digests
              run: |
                  docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
                    $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)

                  # Get the manifest digest
                  MANIFEST_DIGEST=$(docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }} --format '{{ .Manifest.Digest }}')
                  echo "digest=$MANIFEST_DIGEST" >> $GITHUB_OUTPUT

            - name: Inspect image
              run: |
                  docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}

            - name: Generate artifact attestation
              uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2
              with:
                  subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  subject-digest: ${{ steps.merge.outputs.digest }}
                  push-to-registry: true

    test-docker:
        name: Test Docker Image
        runs-on: ubuntu-latest
        needs: [docker-build]
        if: github.event_name == 'pull_request'
        steps:
            - name: Checkout Code
              uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

            - name: Download Frontend Build
              uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
              with:
                  name: frontend-build
                  path: web/dist/

            - name: Build test image
              run: docker build -t wastebin:test .

            - name: Test container startup
              run: |
                  docker run --rm -d -p 3000:3000 --name wastebin-test \
                    -e WASTEBIN_LOCAL_DB=true \
                    -e WASTEBIN_LOG_LEVEL=INFO \
                    wastebin:test

                  # Wait for container to be ready
                  timeout 30 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'

                  # Test health endpoints
                  curl -f http://localhost:3000/health || exit 1

                  # Test basic functionality
                  PASTE_ID=$(curl -s -X POST http://localhost:3000/api/v1/paste \
                    -H "Content-Type: application/x-www-form-urlencoded" \
                    -d "text=test&extension=txt&expires=60" | jq -r '.uuid')

                  if [ "$PASTE_ID" != "null" ] && [ -n "$PASTE_ID" ]; then
                    echo "✅ Paste creation successful: $PASTE_ID"
                    curl -f http://localhost:3000/api/v1/paste/$PASTE_ID || exit 1
                    echo "✅ Paste retrieval successful"
                  else
                    echo "❌ Paste creation failed"
                    exit 1
                  fi

                  # Stop container
                  docker stop wastebin-test
