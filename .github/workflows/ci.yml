name: CI

on:
    push:
        branches:
            - main
    pull_request:
        types:
            - opened
            - reopened
            - synchronize

env:
    GO_VERSION: '1.24'

jobs:
    lint:
        name: Lint
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4

            - name: Set up Go Environment
              uses: actions/setup-go@v5
              with:
                  go-version: ${{ env.GO_VERSION }}

            - name: golangci-lint
              uses: golangci/golangci-lint-action@v6
              with:
                  version: latest
                  args: --timeout=5m

    security:
        name: Security Scan
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4

            - name: Set up Go Environment
              uses: actions/setup-go@v5
              with:
                  go-version: ${{ env.GO_VERSION }}

            - name: Run Gosec Security Scanner
              uses: securecodewarrior/github-action-gosec@master
              with:
                  args: '-fmt sarif -out gosec-results.sarif ./...'

            - name: Upload SARIF file
              uses: github/codeql-action/upload-sarif@v3
              with:
                  sarif_file: gosec-results.sarif

    unit-tests:
        name: Unit Tests
        runs-on: ubuntu-latest
        strategy:
            matrix:
                go-version: ['1.24']
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4

            - name: Set up Go Environment
              uses: actions/setup-go@v5
              with:
                  go-version: ${{ matrix.go-version }}

            - name: Cache Go Modules
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cache/go-build
                      ~/go/pkg/mod
                  key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
                  restore-keys: |
                      ${{ runner.os }}-go-${{ matrix.go-version }}-
                      ${{ runner.os }}-go-

            - name: Tidy Go Modules
              run: |
                  go version
                  go mod tidy
                  git diff --exit-code go.mod go.sum

            - name: Run Unit Tests
              env:
                  WASTEBIN_LOCAL_DB: 'true'
                  WASTEBIN_LOG_LEVEL: 'ERROR'
              run: |
                  go test -v -race -covermode=atomic -coverprofile=coverage.out ./...

            - name: Upload Coverage to Codecov
              if: matrix.go-version == env.GO_VERSION
              uses: codecov/codecov-action@v4
              with:
                  file: ./coverage.out
                  flags: unittests
                  name: codecov-umbrella

    integration-tests:
        name: Integration Tests
        runs-on: ubuntu-latest
        services:
            postgres:
                image: postgres:17
                env:
                    POSTGRES_USER: wastebin
                    POSTGRES_PASSWORD: testpass
                    POSTGRES_DB: wastebin_test
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 5432:5432
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4

            - name: Set up Go Environment
              uses: actions/setup-go@v5
              with:
                  go-version: ${{ env.GO_VERSION }}

            - name: Cache Go Modules
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cache/go-build
                      ~/go/pkg/mod
                  key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
                  restore-keys: |
                      ${{ runner.os }}-go-${{ env.GO_VERSION }}-
                      ${{ runner.os }}-go-

            - name: Run Integration Tests
              env:
                  WASTEBIN_DB_HOST: localhost
                  WASTEBIN_DB_PORT: 5432
                  WASTEBIN_DB_USER: wastebin
                  WASTEBIN_DB_PASSWORD: testpass
                  WASTEBIN_DB_NAME: wastebin_test
                  WASTEBIN_LOCAL_DB: 'false'
                  WASTEBIN_LOG_LEVEL: 'ERROR'
              run: |
                  go test -v -tags=integration ./tests/...

    frontend-tests:
        name: Frontend Tests
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ./web
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'
                  cache-dependency-path: web/package-lock.json

            - name: Install Dependencies
              run: npm ci

            - name: Type Check
              run: npm run type-check

            - name: Format Check
              run: npm run format:check

            - name: Run Linter
              run: npm run lint

            - name: Run Tests
              run: npm run test:coverage

            - name: Upload Coverage Reports
              uses: codecov/codecov-action@v4
              with:
                  file: ./web/coverage/lcov.info
                  flags: frontend
                  name: codecov-frontend

            - name: Build Frontend
              run: npm run build

            - name: Bundle Analysis
              if: github.event_name == 'pull_request'
              run: npm run analyze

            - name: Upload Build Artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: frontend-build
                  path: web/dist/

    build:
        name: Build and Test Docker Image
        runs-on: ubuntu-latest
        needs: [lint, security, unit-tests, integration-tests, frontend-tests]
        if: "!contains(github.event.head_commit.message, '[ci-skip]')"
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4

            - name: Download Frontend Build
              uses: actions/download-artifact@v4
              with:
                  name: frontend-build
                  path: web/dist/

            - name: Prepare Version
              id: prep
              run: |
                  if [[ $GITHUB_REF == refs/tags/* ]]; then
                    echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
                  elif [[ $GITHUB_REF == refs/heads/main ]]; then
                    echo "version=latest" >> $GITHUB_OUTPUT
                  else
                    echo "version=pr-${{ github.event.number }}" >> $GITHUB_OUTPUT
                  fi

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3
              with:
                  platforms: linux/amd64,linux/arm64

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3
              with:
                  install: true
                  version: latest

            - name: Login to GitHub Container Registry
              if: github.event_name != 'pull_request'
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Build Docker Image
              uses: docker/build-push-action@v6
              with:
                  context: .
                  file: ./Dockerfile
                  platforms: linux/amd64,linux/arm64
                  push: ${{ github.event_name != 'pull_request' }}
                  tags: |
                      ghcr.io/${{ github.repository_owner }}/wastebin:${{ steps.prep.outputs.version }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Test Docker Image
              if: github.event_name == 'pull_request'
              run: |
                  docker build -t wastebin:test .
                  docker run --rm -d -p 3000:3000 --name wastebin-test \
                    -e WASTEBIN_LOCAL_DB=true \
                    wastebin:test

                  # Wait for container to be ready
                  sleep 10

                  # Test health endpoints
                  curl -f http://localhost:3000/health || exit 1
                  curl -f http://localhost:3000/health/db || exit 1

                  # Stop container
                  docker stop wastebin-test

    performance-tests:
        name: Performance Tests
        runs-on: ubuntu-latest
        needs: [unit-tests]
        if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4

            - name: Set up Go Environment
              uses: actions/setup-go@v5
              with:
                  go-version: ${{ env.GO_VERSION }}

            - name: Run Benchmarks
              env:
                  WASTEBIN_LOCAL_DB: 'true'
                  WASTEBIN_LOG_LEVEL: 'ERROR'
              run: |
                  go test -bench=. -benchmem -run=^$ ./... | tee benchmark.txt

            - name: Store Benchmark Results
              uses: benchmark-action/github-action-benchmark@v1
              if: github.ref == 'refs/heads/main'
              with:
                  tool: 'go'
                  output-file-path: benchmark.txt
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  auto-push: true

    dependency-check:
        name: Dependency Security Check
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4

            - name: Set up Go Environment
              uses: actions/setup-go@v5
              with:
                  go-version: ${{ env.GO_VERSION }}

            - name: Check for known vulnerabilities
              uses: golang/govulncheck-action@v1
              with:
                  go-version-input: ${{ env.GO_VERSION }}
                  go-package: ./...

    release:
        name: Release
        runs-on: ubuntu-latest
        needs: [build]
        if: startsWith(github.ref, 'refs/tags/')
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Set up Go Environment
              uses: actions/setup-go@v5
              with:
                  go-version: ${{ env.GO_VERSION }}

            - name: Run GoReleaser
              uses: goreleaser/goreleaser-action@v6
              with:
                  version: '~> v2'
                  args: release --clean
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    notify:
        name: Notify
        runs-on: ubuntu-latest
        needs:
            [
                lint,
                security,
                unit-tests,
                integration-tests,
                frontend-tests,
                build,
            ]
        if: always()
        steps:
            - name: Notify Success
              if: ${{ needs.lint.result == 'success' && needs.security.result == 'success' && needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success' && needs.frontend-tests.result == 'success' && needs.build.result == 'success' }}
              run: echo "✅ All CI checks passed!"

            - name: Notify Failure
              if: ${{ needs.lint.result == 'failure' || needs.security.result == 'failure' || needs.unit-tests.result == 'failure' || needs.integration-tests.result == 'failure' || needs.frontend-tests.result == 'failure' || needs.build.result == 'failure' }}
              run: |
                  echo "❌ CI checks failed!"
                  echo "Lint: ${{ needs.lint.result }}"
                  echo "Security: ${{ needs.security.result }}"
                  echo "Unit Tests: ${{ needs.unit-tests.result }}"
                  echo "Integration Tests: ${{ needs.integration-tests.result }}"
                  echo "Frontend Tests: ${{ needs.frontend-tests.result }}"
                  echo "Build: ${{ needs.build.result }}"
                  exit 1
