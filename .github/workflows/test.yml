name: Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_call:

env:
  GO_VERSION: '1.24'
  NODE_VERSION: '24'

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.24']
    permissions:
      contents: read
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go Environment
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Tidy Go Modules
        run: |
          go version
          go mod tidy
          git diff --exit-code go.mod go.sum

      - name: Run Unit Tests
        env:
          WASTEBIN_LOCAL_DB: 'true'
          WASTEBIN_LOG_LEVEL: 'ERROR'
        run: |
          go test -v -race -covermode=atomic -coverprofile=coverage.out ./...

      - name: Upload Coverage to Codecov
        if: matrix.go-version == env.GO_VERSION
        uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: wastebin
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: wastebin_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go Environment
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run Integration Tests
        env:
          WASTEBIN_DB_HOST: localhost
          WASTEBIN_DB_PORT: 5432
          WASTEBIN_DB_USER: wastebin
          WASTEBIN_DB_PASSWORD: testpass
          WASTEBIN_DB_NAME: wastebin_test
          WASTEBIN_LOCAL_DB: 'false'
          WASTEBIN_LOG_LEVEL: 'ERROR'
        run: |
          go test -v -tags=integration ./tests/...

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    defaults:
      run:
        working-directory: ./web
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install Dependencies
        run: npm ci

      - name: Type Check
        run: npm run type-check

      - name: Format Check
        run: npm run format:check

      - name: Run Linter
        run: npm run lint

      - name: Run Tests
        run: npm run test:coverage

      - name: Upload Coverage Reports
        uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5
        with:
          file: ./web/coverage/lcov.info
          flags: frontend
          name: codecov-frontend

      - name: Build Frontend
        run: npm run build

      - name: Bundle Analysis
        if: github.event_name == 'pull_request'
        run: npm run analyze

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: web/dist/
          retention-days: 1

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    permissions:
      contents: read
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go Environment
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run Benchmarks
        env:
          WASTEBIN_LOCAL_DB: 'true'
          WASTEBIN_LOG_LEVEL: 'ERROR'
        run: |
          go test -bench=. -benchmem -run=^$ ./... | tee benchmark.txt

      - name: Store Benchmark Results
        uses: benchmark-action/github-action-benchmark@v1
        if: github.ref == 'refs/heads/main'
        with:
          tool: 'go'
          output-file-path: benchmark.txt
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: false